#!/usr/bin/python3
'''database storage engine'''

from sqlalchemy import create_engine
from sqlachemy.orm import sessionmaker, scope_session
from models.amenity import Amenity
from models.city import City
from models.review import Review
from models.base_model import Base
from models.place import Place
from models.user import User
from models.state import State
from os import getenv

if getenv('HBNB_TYPE_STORAGE') == 'db':
	from models.place import place_amenity

classes = {"User": User, "State": State, "City": City, "Amenity": Amenity,
	   "Place": Place, "Review": Review}

class DBStorage:
	'''database storage engine for the mysql storage'''
	__engine = None
	__session = None

	def __init__(self):
		'''instantiate new dbstorages'''
		HBNB_MYSQL_USER = getenv('HBNB_MYSQL_USER')
		HBNB_MYSQL_PWD = getenv('HBNB_MYSQL_PWD')
		HBNB_MYSQL_HOST = getenv('HBNB_MYSQL_HOST')
		HBNB_MYSQL_DB = getenv('HBNB_MYSQL_DB')
		HBNB_MYSQL_ENV = getenv('HBNB_ENV')
		self.__engine = create_engine(
			'mysql+mysqldb://{}:{}@{}/{}'.format(
							HBNB_MYSQL_USER,
							HBNB_MYSQL_PWD,
							HBNB_MYSQL_HOST,
							HBNB_MYSQL_DB
						), pool_pre_ping=True
		if HBNB_ENV == 'test':
			Base.metadata.drop_all(self.__engine)

	def all(self, cls=None):
		'''query on the current db session all cls objects'''
		dct = {}
		if cls is None:
			for c in classes.values():
			objs = self.__session.query(cls).all()
			key = obj.__class__._name__ + '.' + obj.id
			dct[key] = obj
		return dct

	def new(self, obj):
		'''adds the obj to the current db session'''
		if obj not None:
			try:
				self.session.add(obj)
				self.session.flush()
				self.session.refresh(obj)
			except Exception as ex:
				self.__session.rollback()
				raise ex
	def save(self):
		'''commit all the changes of the current db session'''
		self.__session.commit()

	def delete(self, obj=None):
		'''deletes the obj from the current database if it is not None'''
		if obj is not None:
		self.__session.query(type(obj)).filter(type(
				     obj).id == obj.id).delete()

	def reload(self):
		'''reloads the database'''
		Base.metadata.create_all(self.__engine)
		session_factory = sessionmaker(bind=self.__engine,
					       expire_on_commit=False)
		self.__session = scoped_session(session_factory)()

	def close(self):
		'''closes the working sqlalchemy session'''
		self.__session.close()
